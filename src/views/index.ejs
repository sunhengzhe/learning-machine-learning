<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>机器学习</title>
    <meta name="viewport" content="width=device-width, initial-scale=1,user-scalable=no">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">

    <style>
    body {
        padding-bottom: 100px;
    }

    .echarts-stage {
        margin: 20px 0;
        box-shadow: 0 0 10px #ccc;
        width: 600px;
        height: 600px;
    }
    </style>
</head>
<body>
    <div class="container">
        <p>Tips: 请使用 Chrome 访问</p>
        <div class="linear-regress-charts-single">
            <h2 class="header">一、单变量线性回归 - Linear Regress with single variable</h2>
            <a class="linear-regress-charts-clear-btn btn">清空坐标</a>
            <div id="linear-regress-charts" class="echarts-stage"></div>
        </div>

        <div class="linear-regress-charts-multiple">
            <h2 class="header">二、多变量线性回归 - Linear Regress with multiple variables</h2>
            <p>改变数据重新计算</p>
            <table id="linear-regress-charts-multiple">
                <thead>
                    <tr>
                        <th>房间数量</th>
                        <th>所在楼层</th>
                        <th>房子面积</th>
                        <th>房价</th>
                    </tr>
                </thead>

                <tbody>
                    <tr class="training-row">
                        <td><input value="2" /></td>
                        <td><input value="3" /></td>
                        <td><input value="4" /></td>
                        <td><input value="30" /></td>
                    </tr>
                    <tr class="training-row">
                        <td><input value="3" /></td>
                        <td><input value="2" /></td>
                        <td><input value="1" /></td>
                        <td><input value="17" /></td>
                    </tr>
                    <tr class="training-row">
                        <td><input value="3" /></td>
                        <td><input value="1" /></td>
                        <td><input value="4" /></td>
                        <td><input value="26" /></td>
                    </tr>
                    <tr class="training-row">
                        <td><input value="4" /></td>
                        <td><input value="1" /></td>
                        <td><input value="2" /></td>
                        <td><input value="20" /></td>
                    </tr>
                    <tr class="training-row">
                        <td><input value="1" /></td>
                        <td><input value="4" /></td>
                        <td><input value="3" /></td>
                        <td><input value="27" /></td>
                    </tr>
                    <tr class="forecast-row">
                        <td><input value="0" /></td>
                        <td><input value="0" /></td>
                        <td><input value="0" /></td>
                        <td><span class="result">计算中...</span></td>
                    </tr>
                </tbody>
            </table>
            <p class="function-text">计算中...</p>
        </div>
    </div>

    <script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.bootcss.com/echarts/4.2.0-rc.2/echarts.common.min.js"></script>
    <script src="https://cdn.bootcss.com/lodash.js/4.17.11/lodash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script>
        (function () {
            const myChart = echarts.init(document.getElementById('linear-regress-charts'));

            const symbolSize = 20;
            let data = [];

            const option = {
                title: {
                    text: '点击加入新坐标',
                    x: 10,
                    y: 10
                },
                tooltip: {
                    formatter: function (params) {
                        const curData = params.data || [0, 0];
                        return curData[0].toFixed(2) + ', ' + curData[1].toFixed(2);
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    min: 0,
                    max: 10,
                    type: 'value',
                    axisLine: {onZero: false}
                },
                yAxis: {
                    min: 0,
                    max: 10,
                    type: 'value',
                    axisLine: {onZero: false}
                },
                series: [
                    {
                        id: 'points',
                        type: 'scatter',
                        markLine: {
                            lineStyle: {
                                normal: {
                                    type: 'solid'
                                }
                            },
                        },
                        symbolSize,
                        data
                    }
                ]
            };

            let req;
            const fetchData = _.debounce(() => {
                req && req.abort();
                myChart.showLoading();
                req = $.get('/api/linear-regression/single-variable', {
                        points: JSON.stringify(data)
                    }, (resp) => {
                    const theta0 = Number(resp.theta0);
                    const theta1 = Number(resp.theta1);

                    const markLineDatas = [
                        {
                            coord: [0, theta0],
                            symbol: 'none'
                        },
                        {
                            coord: [(0 - theta0) / theta1, 0],
                            symbol: 'none'
                        },
                        {
                            coord: [10, theta0 + theta1 * 10],
                            symbol: 'none'
                        },
                        {
                            coord: [(10 - theta0) / theta1, 10],
                            symbol: 'none'
                        }
                    ].filter(item => {
                        const [x, y] = item.coord;
                        return x >= 0 && x <= 10 && y >= 0 && y <= 10;
                    });

                    myChart.setOption({
                        series: [{
                            id: 'points',
                            markLine: {
                                tooltip: {
                                    formatter: `y = ${theta0} + ${theta1} * x`
                                },
                                data: [markLineDatas]
                            }
                        }]
                    });

                    myChart.hideLoading();
                })
            }, 500);

            const zr = myChart.getZr();

            zr.on('click', function (params) {
                const pointInPixel = [params.offsetX, params.offsetY];
                const pointInGrid = myChart.convertFromPixel('grid', pointInPixel);

                if (myChart.containPixel('grid', pointInPixel)) {
                    data.push(pointInGrid);

                    myChart.setOption({
                        series: [{
                            id: 'points',
                            data
                        }]
                    });

                    fetchData();
                }
            });

            zr.on('mousemove', function (params) {
                const pointInPixel = [params.offsetX, params.offsetY];
                zr.setCursorStyle(myChart.containPixel('grid', pointInPixel) ? 'copy' : 'default');
            });

            myChart.setOption(option);

            $('.linear-regress-charts-clear-btn').click(() => {
                data = [];
                myChart.setOption({
                    series: [{
                        id: 'points',
                        data: [],
                        markLine: {
                            data: []
                        }
                    }]
                });
            })
        })();

    </script>
    <script>
        (function () {
            const hypothesis = (coords, thetas) => {
                let total = 0;
                thetas.forEach((theta, i) => {
                    total += i === 0 ? theta * 1 : theta * coords[i - 1];
                });
                return total;
            };

            const getFunctionText = (thetas) => {
                let func = 'y = ';

                thetas.forEach((theta, i) => {
                    const thetaText = `<span style="color:red">${theta}</span>`
                    func += i === 0 ? thetaText : ` + ${thetaText} * x${i}`;
                });

                return func;
            };

            const $table = $('#linear-regress-charts-multiple');
            const $result = $table.find('.result');
            const $functionText = $('.linear-regress-charts-multiple .function-text');

            let thetas = [];

            function getTrainingData() {
                const $trs = $table.find('tbody tr.training-row');
                const trainingData = [];
                for (let i = 0; i < $trs.length; i++) {
                    const $tr = $trs.eq(i);
                    const $inputs = $tr.find('input');
                    let point = $inputs.map((index, input) => {
                        return Number(input.value || 0)
                    }).toArray();
                    trainingData.push(point);
                }
                return trainingData;
            }

            function calculateResult() {
                const $inputs = $table.find('tbody tr.forecast-row input');
                const xAxis = $inputs.map((index, input) => Number(input.value || 0))
                const result = hypothesis(xAxis, thetas);
                $result.text(result);
            }

            function reloadTheta() {
                $result.text('计算中...');

                const trainingData = getTrainingData();

                req = $.get('/api/linear-regression/multiple-variables', {
                    points: JSON.stringify(trainingData)
                }, (resp) => {
                    thetas = Object.values(resp);
                    const functionText = getFunctionText(thetas);
                    $functionText.html(functionText);
                    calculateResult();
                })
            }

            $table.find('tbody tr.training-row input').on('input', _.debounce(reloadTheta, 500));
            $table.find('tbody tr.forecast-row input').on('input', calculateResult);

            reloadTheta();
        })();
    </script>
</body>
</html>